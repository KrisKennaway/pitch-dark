;license:MIT
;(c) 2018 by 4am
;
; User interface - views and paint routines for main screen
;
; Public functions
; - PaintMain
; - RepaintMainIfDirty
;

MAGICRTS       = $FF58               ; used to set overflow bit

; View IDs (application-specific, acceptable range 0..15, no duplicates)
ID_PREVIOUS    = 1
ID_OPTIONS     = 2
ID_NEXT        = 3
ID_PLAY        = 4
ID_BOXART      = 5
ID_HINTS       = 6
ID_VERSIONS    = 7
ID_INFO        = 8
ID_DESCRIPTION = 9

gMainScreenPaintDirty
         !byte 0                     ; 0=false, 1=true
gViewHasActiveHotkey
         !byte 0,1,1,1,1,0,0,0,0,0,0,0,0,0,0

;------------------------------------------------------------------------------
; PaintMain/RepaintMainIfDirty
; call WeeGUI to create all application views and paint them
; PaintMain entry point will clear the screen and unconditionally paint everything
; RepaintMainIfDirty will only repaint certain views that vary between games,
;   and only if gMainScreenPaintDirty=1
;
; in:    WeeGUI loaded and initialized
; out:   all registers and flags clobbered
;------------------------------------------------------------------------------
!zone {
PaintMain
         ldx   #WGReset
         jsr   WeeGUI
         stz   gViewHasActiveHotkey+ID_BOXART
         stz   gViewHasActiveHotkey+ID_HINTS
         stz   gViewHasActiveHotkey+ID_VERSIONS
         ldx   #1                    ; flag - clear screen before painting
         stx   gMainScreenPaintDirty
         !byte $2C
RepaintMainIfDirty
         ldx   #0                    ; flag - do not clear screen before painting
         lda   gMainScreenPaintDirty
         bne   +
         rts
+        stz   gMainScreenPaintDirty ; clear dirty flag
         phx                         ; push 'clear screen' flag (will pop at end of procedure)

         jsr   CreateButton          ; create 'previous' button
         !word kViewPrevious

         jsr   CreateButton          ; create 'settings' button
         !word kViewOptions

         jsr   CreateButton          ; create 'next game' button
         !word kViewNext

         lda   gHasSavedGames        ; create 'play game' or 'resume game' button
         beq   .wantPlayButton
         jsr   CreateButton
         !word kViewResume
         bra   .donePlayOrResume
.wantPlayButton
         jsr   CreateButton
         !word kViewPlay
.donePlayOrResume

         jsr   CreateConditionalButton ; create or destroy 'artwork' button
         !byte ID_BOXART
         !word kViewBoxArt
         !word kHasArtwork

         jsr   CreateConditionalButton ; create or destroy 'hints' button
         !byte ID_HINTS
         !word kViewHints
         !word kHasHints

         jsr   CreateConditionalButton ; create or destroy 'revisions' button
         !byte ID_VERSIONS
         !word kViewVersions
         !word kHasVersions

         ldx   #WGCreateView         ; create borderless frame for game title and info
         +LDADDR kViewInfo
         +STAY PARAM0
         jsr   WeeGUI

         ldx   #WGCreateView         ; create scrollable frame for game description text
         +LDADDR kViewDescription
         +STAY PARAM0
         jsr   WeeGUI
         ldx   #WGViewSetAction      ; set view action (called automatically after scrolling)
         +LDADDR PaintDescriptionView
         +STAY PARAM0
         jsr   WeeGUI

         pla                         ; clear screen before repainting?
         beq   .nohome               ; no -> repaint over existing screen, YOLO
         ldx   #WGClearScreen        ; clear screen
         jsr   WeeGUI
         jsr   PaintTitleBar         ; paint top bar

         lda   #4                    ; paint horizontal separator bar
         sta   PARAM1
         ldy   #78
         lda   #83
-        sty   PARAM0
         ldx   #WGSetGlobalCursor
         jsr   WeeGUI
         ldx   #WGPlot
         jsr   WeeGUI
         dey
         bne   -
         ldx   #WGSyncGlobalCursor
         jsr   WeeGUI

.nohome  ldx   #WGViewPaintAll
         jsr   WeeGUI                ; tell everything that can paint itself, to paint itself
         jsr   PaintInfoView         ; paint info box manually

         ldx   #WGSelectView         ; reset scrolling of description box
         lda   #ID_DESCRIPTION
         jsr   WeeGUI
         ldx   #WGScrollX
         lda   #0
         jsr   WeeGUI
         ldx   #WGScrollY
         lda   #0
         jsr   WeeGUI

         jmp   PaintDescriptionView  ; paint description box manually
}

;------------------------------------------------------------------------------
; CreateConditionalButton
; conditionally create a WeeGUI Button, based on per-game options
;
; in:    WeeGUI loaded and initialized
;        gOptionsStore populated
;        stack contains 5 bytes of parameters:
;          +1 [byte] WeeGUI view ID
;          +2 [word] address of WeeGUI view configuration record
;          +4 [word] address of length-prefixed key into gOptionsStore
; out:   all registers and flags clobbered
;------------------------------------------------------------------------------
!zone {
CreateConditionalButton
         +PARAMS_ON_STACK 5

         ldy   #1
         lda   (PARAM),y
         sta   .viewID
         ldy   #3
         lda   (PARAM),y
         pha
         dey
         lda   (PARAM),y
         ply
         +STAY .viewConfigurationRecord
         ldy   #5
         lda   (PARAM),y
         pha
         dey
         lda   (PARAM),y
         ply
         +STAY .optionsStoreKey

         jsr   okvs_get
         !word gOptionsStore
.optionsStoreKey
         !word $FDFD                 ; SMC
.viewID=*+1
         ldx   #$FD                  ; SMC (X = WeeGUI view ID)
         jsr   okvs_as_boolean
         beq   .no
         lda   gViewHasActiveHotkey,x
         bne   .done
         lda   #1
         sta   gViewHasActiveHotkey,x
         jsr   CreateButton
.viewConfigurationRecord
         !word $FDFD                 ; SMC
         bra   .done

.no      lda   gViewHasActiveHotkey,x
         beq   .done
         lda   #0
         sta   gViewHasActiveHotkey,x
         txa                         ; A = WeeGUI view ID
         ldx   #WGSelectView
         jsr   WeeGUI
         ldx   #WGDeleteView
         jsr   WeeGUI

.done    rts
}

!zone {
PaintDescriptionView
         ldx   #WGSelectView
         lda   #ID_DESCRIPTION
         jsr   WeeGUI
         +LDAY addrDescription
         ldx   #kDescriptionPaintWidth
         jsr   MultiPrint
         lda   .vtab+1
         cmp   #10
         bcs   +
         lda   #10
+        ldx   #WGSetContentHeight
         jmp   WeeGUI

PaintInfoView
         ldx   #WGSelectView
         lda   #ID_INFO
         jsr   WeeGUI
         +LDAY addrInfo
         ldx   #kInfoPaintWidth
         jsr   MultiPrint

         jsr   okvs_get              ; get shortname of current game
         !word gGlobalPrefsStore
         !word kLastPlayed
         +STAY +                     ; A/Y contains address

         jsr   okvs_get              ; get selected version of this game
         !word gGlobalPrefsStore
+        !word $FDFD                 ; SMC
         +STAY +                     ; A/Y contains address

         jsr   okvs_get              ; get long description of this version
         !word gVersionsStore
+        !word $FDFD                 ; SMC
                                     ; A/Y contains address
         ldx   #kInfoPaintWidth
         jsr   CreateNullTerminatedString

         +LDADDR kNullTerminatedBuffer
         bra   MultiPrintWhereYouAre

MultiPrint
         stz   .htab+1
         stz   .vtab+1
MultiPrintWhereYouAre
         stx   .printLineLength+1
         +STAY $00
.printLoop
         lda   ($00)
         beq   .printDone
         ldx   #WGSetCursor
.htab    lda   #$FD                  ; SMC
         sta   PARAM0
.vtab    lda   #$FD                  ; SMC
         sta   PARAM1
         jsr   WeeGUI
         ldx   #WGPrint
         lda   $00
         sta   PARAM0
         lda   $01
         sta   PARAM1
         bit   MAGICRTS              ; set overflow bit
         jsr   WeeGUI
         lda   $00
         clc
.printLineLength
         adc   #$fd                  ; SMC
         sta   $00
         bcc   +
         inc   $01
+        inc   .vtab+1
         bne   .printLoop
.printDone
         rts

kViewPrevious
         !byte ID_PREVIOUS           ; view ID
         !byte 1                     ; left
         !byte 2                     ; top
         !byte 13                    ; width
         !word callback_previous     ; callback
         !word kStringPrevious       ; caption
kStringPrevious
         !text "< "
         !byte $10                   ; 'P' inverse
         !text "revious",0

kViewNext
         !byte ID_NEXT               ; view ID
         !byte 66                    ; left
         !byte 2                     ; top
         !byte 13                    ; width
         !word callback_next         ; callback
         !word kStringNext           ; caption
kStringNext
         !byte $0E                   ; 'N' inverse
         !text "ext game >",0

kViewOptions
         !byte ID_OPTIONS            ; view ID
         !byte 34                    ; left
         !byte 2                     ; top
         !byte 12                    ; width
         !word callback_options      ; callback
         !word kStringOptions
kStringOptions
         !byte $13                   ; 'S' inverse
         !text "ettings",0

kViewPlay
         !byte ID_PLAY               ; view ID
         !byte 66                    ; left
         !byte 6                     ; top
         !byte 13                    ; width
         !word callback_play         ; callback
         !word kStringPlay           ; caption
kStringPlay
         !byte 144
         !text "lay "
         !byte $67                   ; 'g' inverse
         !text "ame",0

kViewResume
         !byte ID_PLAY               ; view ID
         !byte 66                    ; left
         !byte 6                     ; top
         !byte 13                    ; width
         !word callback_resume       ; callback
         !word kStringResume         ; caption
kStringResume
         !byte 146
         !text "esume "
         !byte $67                   ; 'g' inverse
         !text "ame",0

kViewBoxArt
         !byte ID_BOXART             ; view ID
         !byte 66                    ; left
         !byte 8                     ; top
         !byte 13                    ; width
         !word callback_boxart       ; callback
         !word kStringBoxArt         ; caption
kStringBoxArt
         !byte $01                   ; 'A' inverse
         !text "rtwork",0

kViewHints
         !byte ID_HINTS              ; view ID
         !byte 66                    ; left
         !byte 10                    ; top
         !byte 13                    ; width
         !word callback_clues        ; callback
         !word kStringHints          ; caption
kStringHints
         !byte $08                   ; 'H' inverse
         !text "ints",0

kViewVersions
         !byte ID_VERSIONS           ; view ID
         !byte 66                    ; left
         !byte 12                    ; top
         !byte 13                    ; width
         !word callback_versions     ; callback
         !word kStringVersions       ; caption
kStringVersions
         !byte $12                   ; 'R' inverse
         !text "evisions",0

kViewInfo
         !byte ID_INFO               ; view ID
         !byte 0                     ; style
         !byte 0                     ; left
         !byte 6                     ; top
         !byte 65                    ; visible width
         !byte 6                     ; visible height
         !byte 65                    ; width
         !byte 6                     ; height

kViewDescription
         !byte ID_DESCRIPTION        ; view ID
         !byte 2                     ; style
         !byte 1                     ; left
         !byte 15                    ; top
         !byte 77                    ; visible width
         !byte 8                     ; visible height
         !byte 77                    ; width
         !byte 39                    ; height
}
